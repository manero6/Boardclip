#!/bin/bash

GITHUB_EXAMPLES_URL=https://raw.githubusercontent.com/manero6/Boardclip/main/examples

check_downloader() {
  # Check what downloader to use to get files from Github
  if which wget &>/dev/null
  then
    echo "Downloading example files with wget"
    echo "Saving example files under => $BOARDCLIP_DIR"
    DOWNLOADER=wget
  elif which curl &>/dev/null
  then
    echo "Downloading example files with curl"
    echo "Saving example files under => $BOARDCLIP_DIR"
    DOWNLOADER=curl
  else
    echo "No suitable downloader found!"
    echo "Aborting..."
    exit 1
  fi
}

get_examples() {
  # Get which downloader to use and set the download options
  check_downloader
  case $DOWNLOADER in
    wget)
      get_examples_downloader() {
        echo wget -q $1 -O $2
	echo -n "Downloading $1 => "
      }
      ;;
    curl)
      get_examples_downloader() {
        echo curl -s $1 -o $2
	echo -n "Downloading $1 => "
      }
      ;;
  esac

  # Download all examples from Github
  for EXAMPLE in example{1..9}
  do
    get_examples_downloader "$GITHUB_EXAMPLES_URL/$EXAMPLE" "$BOARDCLIP_DIR/$EXAMPLE" && echo "Done!"
  done
}

get_examples

check_dependencies() {
  # 'yad' and 'xclip' must be installed or in PATH. Otherwise abort.
  # debug # for DEPENDENCY in yada xclippa
  for DEPENDENCY in yad xclip
  do
    if ! which $DEPENDENCY >/dev/null
    then
      echo "'$DEPENDENCY' not found!"
      echo "Please install it, as Boardclip depends on it."
      exit 127
    fi
  done
}

check_cfg_dir() {
  # If the default directory is not present, create it. Exit if something goes wrong.
  if ! test -d $BOARDCLIP_DIR
  then
    echo "Default directory not found!"
    echo -n "Creating it under '$BOARDCLIP_DIR' => "
    if mkdir $BOARDCLIP_DIR
    then
      echo "Done!"
    else
      echo "ERROR"
      exit 1
    fi
  fi
}

check_github() {
  # Return error and print a message if GitHub cannot be reached
  # ping 5 times with an interval of 0.2 second (default is 1s)
  # debug # if ! ping -i 0.2 -c 5 github.coma >/dev/null
  if ! ping -i 0.2 -c 5 github.com >/dev/null
  then
    echo "GitHub cannot be reached! Is there a working internet connection?"
    return 1
  fi
}

download_examples() {
 echo todo
}

BOARDCLIP_DIR=~/.config/Boardclip
BOARDCLIP_CFG=$BOARDCLIP_DIR/config
source $BOARDCLIP_CFG

XCLIP_SELECTION="xclip -i"
XCLIP_CLIPBOARD="xclip -selection clipboard -i"
# Defaulting 'xclip' to copy to clipboard
XCLIP=$XCLIP_CLIPBOARD

# Default variables that can be changed in ~/.config/Boardclip/config
MAX_VERTICAL=${MAX_VERTICAL:=5}
MAX_HORIZONTAL=${MAX_HORIZONTAL:=25}
YAD_BORDERS=${YAD_BORDERS:=20}
YAD_BUTTONS_LAYOUT=${YAD_BUTTONS_LAYOUT:=center}

# Defualt variables
YAD_TITLE=Boardclip
YAD_OPTIONS="--title $YAD_TITLE
--buttons-layout $YAD_BUTTONS_LAYOUT
--borders $YAD_BORDERS
--align-buttons
--no-buttons
--form"

# Create a variable containing the needed paths (only files or links recursively, excluding Boardclip's config)
FILES="$(find $BOARDCLIP_DIR -type f,l ! -name config)"

create_yad_buttons () {
  # Dynamically creates yad's buttons based on the amount and content of the files/links found in $BOARDCLIP_DIR
  COUNTER=0
  for i in $FILES
  do
    # Populating an array with fullpaths of all files
    BOARDCLIP_FILES[$COUNTER]="$i" && \
    # This is a layout variant using '--buttons' instead of '--field'.
    # It works as well but there is no way to create a grid with the '--columns' option,
    # all buttons are positioned horizontally, from left to right.
    #BOARDCLIP_YAD[$COUNTER]="--button \"\$(cat ${BOARDCLIP_FILES[$COUNTER]}|colrm $MAX_HORIZONTAL)\":\"bash -c 'xclip -i ${BOARDCLIP_FILES[$COUNTER]} && echo =\> Copied ${BOARDCLIP_FILES[$COUNTER]##*/}'\""
    # The following creates the content each button.
    # The actual text is piped to 'colrm' and 'head',
    # that cut the given text horizontally (after the given position) and vertically (after the given line).
    BOARDCLIP_YAD_BUTTONS[$COUNTER]="--field \"\$(cat ${BOARDCLIP_FILES[$COUNTER]} | colrm $MAX_HORIZONTAL | head -n $MAX_VERTICAL)\":fbtn"
    # This creates the actual commands that are executed when buttons are pressed:
    # - the full content of the pressed button is copied using 'xclip'
    # - the filename is echoed (just the filename without fullpath)
    BOARDCLIP_YAD_COMMANDS[$COUNTER]="\"bash -c '$XCLIP ${BOARDCLIP_FILES[$COUNTER]} && echo =\> Copied ${BOARDCLIP_FILES[$COUNTER]##*/}'\""
    ((COUNTER++))
  done
}

create_yad_buttons

get_columns_round_down() {
  bc <<< "sqrt(${#BOARDCLIP_FILES[@]})"
}

get_columns_round_up() {
  VAR_INT=$(bc <<< "sqrt(${#BOARDCLIP_FILES[@]})")
  VAR_FLOAT=$(bc -l <<< "sqrt(${#BOARDCLIP_FILES[@]})")
  bc -l <<< "if ($VAR_FLOAT > $VAR_INT) $VAR_INT+1 else $VAR_INT"
}


# Columns are dinamically calculated as the square root of the total amount of files.
# If the result is not an integer, then it can be rounded up or down.
YAD_COLUMNS="--columns $(get_columns_round_down)"

echo_yad_options() {
  echo -e "'yad' is lauched with the following options:\n\n$YAD_OPTIONS $YAD_COLUMNS\n"
}

main() {
  #check_github

  check_dependencies
  echo_yad_options
  get_columns_round_down
  get_columns_round_up

  eval yad $YAD_OPTIONS $YAD_COLUMNS ${BOARDCLIP_YAD_BUTTONS[@]} ${BOARDCLIP_YAD_COMMANDS[@]}
  
}

main
